model_results_lr <- eventReactive(input$run_model_lr, {
req(input$turnover_column_lr, input$predictor_columns_lr)
data <- uploaded_data_lr()
split <- split_data(data, input$split_ratio_lr)
formula <- as.formula(paste(input$turnover_column_lr, "~", paste(input$predictor_columns_lr, collapse = "+")))
model <- glm(formula, data = split$train, family = binomial())
predictions <- ifelse(predict(model, newdata = split$test, type = "response") > 0.5, "1", "0")
metrics <- calculate_metrics(split$test[[input$turnover_column_lr]], predictions)
list(model = model, test_data = split$test, metrics = metrics)
})
output$model_summary_lr <- renderPrint({
req(model_results_lr())
# Extract the model
model <- model_results_lr()$model
summary_model <- summary(model)
# Extract coefficients and statistics
coefficients <- summary_model$coefficients
conf_intervals <- confint(model)  # Confidence intervals
# Create a formatted table
formatted_output <- data.frame(
Predictor = rownames(coefficients),
Estimate = round(coefficients[, "Estimate"], 3),
`Std. Error` = round(coefficients[, "Std. Error"], 3),
`z-value` = round(coefficients[, "z value"], 3),
`p-value` = ifelse(coefficients[, "Pr(>|z|)"] < .001, "< .001", round(coefficients[, "Pr(>|z|)"], 3)),
`95% CI (Lower)` = round(conf_intervals[, 1], 3),
`95% CI (Upper)` = round(conf_intervals[, 2], 3)
)
# Extract reference categories for categorical predictors
reference_categories <- sapply(model$xlevels, function(levels) levels[1])
# Add APA formatting
cat("Logistic Regression Model Summary\n")
cat("=================================\n")
cat("Dependent Variable: ", deparse(formula(model)[[2]]), "\n\n")
# Clean column names and print the table
names(formatted_output) <- c("Predictor", "Estimate", "Std. Error", "z-value", "p-value", "95% CI (Lower)", "95% CI (Upper)")
print(formatted_output, row.names = FALSE)
cat("\nReference Categories for Categorical Variables:\n")
if (length(reference_categories) > 0) {
for (var in names(reference_categories)) {
cat(sprintf("- %s: '%s'\n", var, reference_categories[[var]]))
}
} else {
cat("None (No categorical variables detected)\n")
}
cat("\nModel Fit:\n")
cat(sprintf("AIC: %.2f\n", summary_model$aic))
})
output$data_table_lr <- renderDT({
req(uploaded_data_lr())
datatable(uploaded_data_lr(), options = list(pageLength = 5))
})
# Render the histogram
output$risk_histogram_lr <- renderPlotly({
req(predictions_lr(), input$risk_threshold)
preds <- predictions_lr()
threshold <- input$risk_threshold
# Update the risk category based on the threshold
preds$risk_category <- ifelse(preds$risk_score > threshold, "Predicted At Risk", "Predicted Not At Risk")
# Interactive histogram
plot_ly(
data = preds,
x = ~risk_score,
color = ~risk_category,
type = "histogram",
nbinsx = 20,
alpha = 0.7,
colors = c("#FFB74D", "#64B5F6")  # Specify custom colors
) %>%
layout(
title = list(text = "Risk Score Distribution"),
xaxis = list(title = "Risk Score"),
yaxis = list(title = "Count"),
barmode = "stack",
legend = list(title = list(text = "Risk Category"))
)
})
# Render the pie chart
output$risk_piechart_lr <- renderPlotly({
req(predictions_lr(), input$risk_threshold)
preds <- predictions_lr()
threshold <- input$risk_threshold
# Update the risk category based on the threshold
preds$risk_category <- ifelse(preds$risk_score > threshold, "Predicted At Risk", "Predicted Not At Risk")
# Subset of people who did not leave
actual_not_left <- preds[preds[[input$turnover_column_lr]] == 0, ]
predicted_at_risk <- sum(actual_not_left$risk_category == "Predicted At Risk")
predicted_not_at_risk <- sum(actual_not_left$risk_category == "Predicted Not At Risk")
# Create a data frame for proportions
risk_summary <- data.frame(
Category = c("Predicted At Risk", "Predicted Not At Risk"),
Count = c(predicted_at_risk, predicted_not_at_risk)
)
# Interactive pie chart
plot_ly(
data = risk_summary,
labels = ~Category,
values = ~Count,
type = "pie",
textinfo = "label+percent",
insidetextorientation = "radial",
marker = list(
colors = c("#FFB74D", "#64B5F6")  # Specify colors for "Predicted At Risk" and "Predicted Not At Risk"
)
) %>%
layout(
title = list(
text = "Proportion of 'Not Left' Employees Predicted as 'At Risk'",
font = list(size = 16)  # Optional: Adjust title font size
),
showlegend = TRUE,
margin = list(t = 100)  # Increase the top margin to create more space
)
})
output$performance_metrics_lr <- renderPrint({
req(model_results_lr())
metrics <- model_results_lr()$metrics
cat("Confusion Matrix:\n")
print(metrics$confusion)
cat(sprintf("\nAccuracy: %.2f\nPrecision: %.2f\nRecall: %.2f\nF1 Score: %.2f",
metrics$accuracy, metrics$precision, metrics$recall, metrics$f1))
})
predictions_lr <- reactive({
req(model_results_lr(), uploaded_data_lr())
# Retrieve the entire dataset
full_data <- uploaded_data_lr()
# Calculate risk scores (predicted probabilities) for the entire dataset
full_data$risk_score <- predict(model_results_lr()$model, newdata = full_data, type = "response")
# Categorize based on a threshold (default is 0.5)
full_data$risk_category <- ifelse(full_data$risk_score > 0.5, "Predicted At Risk", "Predicted Not At Risk")
full_data
})
output$download_predictions_lr <- downloadHandler(
filename = "predicted_risks_lr.csv",
content = function(file) {
write.csv(predictions_lr(), file, row.names = FALSE)
}
)
check_assumptions_lr <- reactive({
req(input$predictor_columns_lr, input$turnover_column_lr, model_results_lr())
data <- uploaded_data_lr()
predictors <- input$predictor_columns_lr
turnover_column <- input$turnover_column_lr
formula <- as.formula(paste(turnover_column, "~", paste(predictors, collapse = "+")))
model <- glm(formula, data = data, family = binomial())
results <- list()
# Check if turnover column is binary
if (is.numeric(data[[turnover_column]]) && length(unique(data[[turnover_column]])) == 2) {
binary_check <- "Met (Turnover column is binary)"
} else {
binary_check <- "Not Met (Turnover column must be numeric with exactly two unique values)"
}
results$binary_check <- binary_check
# Check sample size
least_frequent_count <- min(table(data[[turnover_column]]))
num_predictors <- length(predictors)
required_sample_size <- 10 * num_predictors / (least_frequent_count / nrow(data))
if (least_frequent_count >= required_sample_size) {
sample_size_check <- paste("Met (Minimum sample size satisfied: least frequent outcome has",
least_frequent_count, "cases, requires at least",
round(required_sample_size), "cases)")
} else {
sample_size_check <- paste("Not Met (Minimum sample size not satisfied: least frequent outcome has",
least_frequent_count, "cases, requires at least",
round(required_sample_size), "cases)")
}
results$sample_size_check <- sample_size_check
# Check linear relationship with logit
linearity_results <- list()
for (predictor in predictors) {
if (is.numeric(data[[predictor]]) && length(unique(data[[predictor]])) > 1) {
logit <- log(model$fitted.values / (1 - model$fitted.values))
scatter <- cor(data[[predictor]], logit)
correlation_result <- if (abs(scatter) < 0.3) {
"Weak correlation with logit"
} else {
"Met"
}
data[[paste0("log_", predictor)]] <- log(data[[predictor]] + 1e-5)
bt_formula <- as.formula(paste(turnover_column, "~", predictor, "+",
paste0(predictor, ":log_", predictor)))
bt_model <- glm(bt_formula, data = data, family = binomial())
bt_summary <- summary(bt_model)
interaction_term <- paste0(predictor, ":log_", predictor)
if (interaction_term %in% rownames(bt_summary$coefficients)) {
bt_result <- if (bt_summary$coefficients[interaction_term, "Pr(>|z|)"] < 0.05) {
"Box-Tidwell significant"
} else {
"Box-Tidwell test passed"
}
} else {
bt_result <- "Box-Tidwell term missing (possibly constant or invalid values)"
}
if (correlation_result == "Met" && bt_result == "Box-Tidwell test passed") {
linearity_results[[predictor]] <- "Met"
} else {
issues <- c()
if (correlation_result != "Met") issues <- c(issues, correlation_result)
if (bt_result != "Box-Tidwell test passed") issues <- c(issues, bt_result)
linearity_results[[predictor]] <- paste("Not Met (", paste(issues, collapse = ", "), ")", sep = "")
}
} else {
linearity_results[[predictor]] <- "Not Applicable (Categorical or constant predictor)"
}
}
results$linearity <- linearity_results
# Check multicollinearity using VIF
valid_predictors <- predictors[sapply(data[predictors], is.numeric) & sapply(data[predictors], function(x) length(unique(x)) > 1)]
if (length(valid_predictors) > 1) {
valid_formula <- as.formula(paste(turnover_column, "~", paste(valid_predictors, collapse = "+")))
valid_model <- glm(valid_formula, data = data, family = binomial())
vif_values <- vif(valid_model)
if (all(vif_values <= 5)) {
multicollinearity_result <- "Met (All VIF values are <= 5)"
} else {
high_vif <- names(vif_values[vif_values > 5])
multicollinearity_result <- paste("Not Met (High VIF for:", paste(high_vif, collapse = ", "), ")")
}
} else {
multicollinearity_result <- "Not Applicable (Too few numeric predictors for VIF calculation)"
}
results$multicollinearity <- multicollinearity_result
return(results)
})
output$assumption_check_lr <- renderUI({
req(check_assumptions_lr())
results <- check_assumptions_lr()
binary_message <- results$binary_check
sample_size_message <- results$sample_size_check
linearity_message <- if (is.character(results$linearity)) {
results$linearity
} else {
paste(
lapply(names(results$linearity), function(predictor) {
paste("Predictor", predictor, ":", results$linearity[[predictor]])
}),
collapse = "<br>"
)
}
multicollinearity_message <- results$multicollinearity
# Check if recommendations are needed
binary_recommendation <- if (grepl("Not Met", binary_message)) {
div(
p("Recommendation: Ensure the outcome variable is binary (e.g., 0 = No, 1 = Yes). If the variable is categorical with more than two levels, recode it into a binary format. Re-run the app with the updated dataset.",
style = "color: orange; font-style: italic;")
)
} else {
NULL
}
sample_size_recommendation <- if (grepl("Not Met", sample_size_message)) {
div(
p("Recommendation: Increase your sample size or reduce the number of predictors in the model to satisfy the minimum sample size requirement. Re-run the app.",
style = "color: orange; font-style: italic;")
)
} else {
NULL
}
linearity_not_met <- any(sapply(results$linearity, function(x) grepl("Not Met", x)))
linearity_recommendation <- if (linearity_not_met) {
div(
p("Recommendation: Consider turning continuous predictors into categories (e.g., using quantiles) or applying transformations (e.g., logarithmic or polynomial) to improve linearity with the logit. Re-run the app with the updated dataset.",
style = "color: orange; font-style: italic;")
)
} else {
NULL
}
multicollinearity_recommendation <- if (grepl("Not Met", multicollinearity_message)) {
div(
p("Recommendation: Address multicollinearity by removing highly correlated predictors or combining them into a single composite variable.",
style = "color: orange; font-style: italic;")
)
} else {
NULL
}
# Render the full UI
div(
h4("Assumption Checks", style = "font-weight: bold;"),
# Binary check
div(style = "margin-bottom: 10px;",
h5("Binary Outcome:"),
p(binary_message, style = ifelse(grepl("Not Met", binary_message), "color: red;", "color: green;")),
binary_recommendation
),
# Sample size check
div(style = "margin-bottom: 10px;",
h5("Sample Size:"),
p(sample_size_message, style = ifelse(grepl("Not Met", sample_size_message), "color: red;", "color: green;")),
sample_size_recommendation
),
# Multicollinearity
div(style = "margin-bottom: 10px;",
h5("Multicollinearity:"),
p(multicollinearity_message, style = ifelse(grepl("Not Met", multicollinearity_message), "color: red;", "color: green;")),
multicollinearity_recommendation
),
# Linearity with logit
div(style = "margin-bottom: 10px;",
h5("Linearity with Logit:"),
HTML(linearity_message),
linearity_recommendation
)
)
})
#-----------------------------------------------------------------------------#
# Random Forest
#-----------------------------------------------------------------------------#
# Random Forest
uploaded_data_rf <- reactive({
req(input$file_rf)
read.csv(input$file_rf$datapath)
})
output$target_column_ui_rf <- renderUI({
req(uploaded_data_rf())
selectInput("target_column_rf", "Select Turnover Column", choices = names(uploaded_data_rf()))
})
output$predictor_columns_ui_rf <- renderUI({
req(uploaded_data_rf())
checkboxGroupInput("predictor_columns_rf", "Select Predictors", choices = names(uploaded_data_rf()))
})
turnover_stats_rf <- reactive({
req(uploaded_data_rf(), input$target_column_rf)
data <- uploaded_data_rf()
turnover_column <- input$target_column_rf
if (is.numeric(data[[turnover_column]])) {
# Ensure the turnover column is binary (0 and 1)
counts <- table(data[[turnover_column]])
if (length(counts) == 2) {
total <- sum(counts)
turnover_rate <- counts["1"] / total
list(
total = total,
zero_count = counts["0"],
one_count = counts["1"],
turnover_rate = turnover_rate
)
} else {
return(NULL)
}
} else {
return(NULL)
}
})
# Render turnover statistics box in the dataset preview panel
output$turnover_stats_box_rf <- renderUI({
req(uploaded_data_rf(), input$target_column_rf)
data <- uploaded_data_rf()
turnover_column <- input$target_column_rf
if (is.numeric(data[[turnover_column]])) {
counts <- table(data[[turnover_column]])
if (length(counts) == 2) {
total <- sum(counts)
turnover_rate <- counts["1"] / total
tagList(
div(class = "well", style = "background-color: #f7f7f7; padding: 15px; border-radius: 10px;",
h4("Turnover Statistics", style = "font-weight: bold;"),
tags$ul(
tags$li(sprintf("Total Employees: %d", total), style = "font-size: 14px;"),
tags$li(sprintf("Number of 0s (Employees Remaining): %d", counts["0"]), style = "font-size: 14px;"),
tags$li(sprintf("Number of 1s (Employees who Left): %d", counts["1"]), style = "font-size: 14px;"),
tags$li(sprintf("Turnover Rate: %.2f%%", turnover_rate * 100), style = "font-size: 14px;")
)
)
)
} else {
div(h4("Turnover Statistics", style = "font-weight: bold;"), p("Selected column does not have valid binary values (0 and 1)."))
}
} else {
div(h4("Turnover Statistics", style = "font-weight: bold;"), p("Selected column is not numeric."))
}
})
observe({
req(input$predictor_columns_rf)
updateNumericInput(session, "mtry_rf", value = floor(sqrt(length(input$predictor_columns_rf))), max = length(input$predictor_columns_rf))
})
model_results_rf <- eventReactive(input$run_model_rf, {
req(input$target_column_rf, input$predictor_columns_rf)
data <- uploaded_data_rf()
data[[input$target_column_rf]] <- as.factor(data[[input$target_column_rf]])
split <- split_data(data, input$split_ratio_rf)
formula <- as.formula(paste(input$target_column_rf, "~", paste(input$predictor_columns_rf, collapse = "+")))
# Use user-defined hyperparameters
ntree <- input$ntree_rf
mtry <- if (is.null(input$mtry_rf)) floor(sqrt(length(input$predictor_columns_rf))) else input$mtry_rf
nodesize <- input$nodesize_rf
model <- randomForest(formula, data = split$train, ntree = ntree, mtry = mtry, nodesize = nodesize)
predictions <- predict(model, newdata = split$test)
predictions <- factor(predictions, levels = levels(split$test[[input$target_column_rf]]))
metrics <- calculate_metrics(split$test[[input$target_column_rf]], predictions)
list(model = model, test_data = split$test, metrics = metrics, ntree = ntree, mtry = mtry, nodesize = nodesize)
})
output$model_summary_rf <- renderPrint({
req(model_results_rf())
model <- model_results_rf()$model
cat("Random Forest Model Summary\n")
cat("===========================\n")
cat(sprintf("Number of Trees (ntree): %d\n", model_results_rf()$ntree))
cat(sprintf("Number of Variables at Each Split (mtry): %d\n", model_results_rf()$mtry))
cat(sprintf("Minimum Node Size (nodesize): %d\n\n", model_results_rf()$nodesize))
print(model)
})
output$data_table_rf <- renderDT({
req(uploaded_data_rf())
datatable(uploaded_data_rf(), options = list(pageLength = 5))
})
output$importance_plot_rf <- renderPlot({
req(model_results_rf())
varImpPlot(model_results_rf()$model, main = "Feature Importance")
})
output$performance_metrics_rf <- renderPrint({
req(model_results_rf())
metrics <- model_results_rf()$metrics
cat("Confusion Matrix:\n")
print(metrics$confusion)
cat(sprintf("\nAccuracy: %.2f\nPrecision: %.2f\nRecall: %.2f\nF1 Score: %.2f",
metrics$accuracy, metrics$precision, metrics$recall, metrics$f1))
})
predictions_rf <- reactive({
req(model_results_rf(), uploaded_data_rf())
# Retrieve the entire dataset
full_data <- uploaded_data_rf()
# Make predictions on the entire dataset
full_data$predicted <- predict(model_results_rf()$model, newdata = full_data)
# Optionally add predicted probabilities
full_data$predicted_prob <- predict(model_results_rf()$model, newdata = full_data, type = "prob")[, 2]
full_data
})
output$download_predictions_rf <- downloadHandler(
filename = "predicted_risks_rf.csv",
content = function(file) {
write.csv(predictions_rf(), file, row.names = FALSE)
}
)
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv5.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv5.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv5.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv5.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv6.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv7.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv8.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv9.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv10.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv10.R')
library(shiny); runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
library(shiny); runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
library(shiny); runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
model %>% compile(
loss = "binary_crossentropy",
optimizer = optimizer_adam(),
metrics = c("accuracy")
)
library(shiny); runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/testing ,lp.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv10.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv10.R')
library(shiny); runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv17.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv17.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv17.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv17.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv17.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv17.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv17.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv18.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv19.R')
library(shiny); runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv18.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv19.R')
library(shiny); runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv19.R')
library(shiny); runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv19.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv19.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv20.R')
library(shiny); runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv20.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv20.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv20.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv21.R')
library(shiny); runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv24.R')
library(shiny); runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv24.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv24.R')
library(shiny); runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable/appv25.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/archive/appv26.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/archive/appv26.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/archive/appv26.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/archive/appv26.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/archive/appv26.R')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable')
runApp('C:/Users/ClaudieCoulombe/OneDrive - System 3/General P/Employee Turnover/turnover_uploadable')
